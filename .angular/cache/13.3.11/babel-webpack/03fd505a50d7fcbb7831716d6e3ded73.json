{"ast":null,"code":"import _inherits from \"/Users/davidholliday/Desktop/forms-reactive-assignment-start/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/davidholliday/Desktop/forms-reactive-assignment-start/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"/Users/davidholliday/Desktop/forms-reactive-assignment-start/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/davidholliday/Desktop/forms-reactive-assignment-start/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function expand(project) {\n  var concurrent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.POSITIVE_INFINITY;\n  var scheduler = arguments.length > 2 ? arguments[2] : undefined;\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n  return function (source) {\n    return source.lift(new ExpandOperator(project, concurrent, scheduler));\n  };\n}\nexport var ExpandOperator = /*#__PURE__*/function () {\n  function ExpandOperator(project, concurrent, scheduler) {\n    _classCallCheck(this, ExpandOperator);\n    this.project = project;\n    this.concurrent = concurrent;\n    this.scheduler = scheduler;\n  }\n  _createClass(ExpandOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n    }\n  }]);\n  return ExpandOperator;\n}();\nexport var ExpandSubscriber = /*#__PURE__*/function (_SimpleOuterSubscribe) {\n  _inherits(ExpandSubscriber, _SimpleOuterSubscribe);\n  var _super = _createSuper(ExpandSubscriber);\n  function ExpandSubscriber(destination, project, concurrent, scheduler) {\n    var _this;\n    _classCallCheck(this, ExpandSubscriber);\n    _this = _super.call(this, destination);\n    _this.project = project;\n    _this.concurrent = concurrent;\n    _this.scheduler = scheduler;\n    _this.index = 0;\n    _this.active = 0;\n    _this.hasCompleted = false;\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      _this.buffer = [];\n    }\n    return _this;\n  }\n  _createClass(ExpandSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      var destination = this.destination;\n      if (destination.closed) {\n        this._complete();\n        return;\n      }\n      var index = this.index++;\n      if (this.active < this.concurrent) {\n        destination.next(value);\n        try {\n          var project = this.project;\n          var result = project(value, index);\n          if (!this.scheduler) {\n            this.subscribeToProjection(result, value, index);\n          } else {\n            var state = {\n              subscriber: this,\n              result: result,\n              value: value,\n              index: index\n            };\n            var _destination = this.destination;\n            _destination.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n          }\n        } catch (e) {\n          destination.error(e);\n        }\n      } else {\n        this.buffer.push(value);\n      }\n    }\n  }, {\n    key: \"subscribeToProjection\",\n    value: function subscribeToProjection(result, value, index) {\n      this.active++;\n      var destination = this.destination;\n      destination.add(innerSubscribe(result, new SimpleInnerSubscriber(this)));\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      this.hasCompleted = true;\n      if (this.hasCompleted && this.active === 0) {\n        this.destination.complete();\n      }\n      this.unsubscribe();\n    }\n  }, {\n    key: \"notifyNext\",\n    value: function notifyNext(innerValue) {\n      this._next(innerValue);\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete() {\n      var buffer = this.buffer;\n      this.active--;\n      if (buffer && buffer.length > 0) {\n        this._next(buffer.shift());\n      }\n      if (this.hasCompleted && this.active === 0) {\n        this.destination.complete();\n      }\n    }\n  }], [{\n    key: \"dispatch\",\n    value: function dispatch(arg) {\n      var subscriber = arg.subscriber,\n        result = arg.result,\n        value = arg.value,\n        index = arg.index;\n      subscriber.subscribeToProjection(result, value, index);\n    }\n  }]);\n  return ExpandSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"names":["SimpleOuterSubscriber","innerSubscribe","SimpleInnerSubscriber","expand","project","concurrent","arguments","length","undefined","Number","POSITIVE_INFINITY","scheduler","source","lift","ExpandOperator","_classCallCheck","_createClass","key","value","call","subscriber","subscribe","ExpandSubscriber","_SimpleOuterSubscribe","_inherits","_super","_createSuper","destination","_this","index","active","hasCompleted","buffer","_next","closed","_complete","next","result","subscribeToProjection","state","add","schedule","dispatch","e","error","push","complete","unsubscribe","notifyNext","innerValue","notifyComplete","shift","arg"],"sources":["/Users/davidholliday/Desktop/forms-reactive-assignment-start/node_modules/rxjs/_esm2015/internal/operators/expand.js"],"sourcesContent":["import { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function expand(project, concurrent = Number.POSITIVE_INFINITY, scheduler) {\n    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n    return (source) => source.lift(new ExpandOperator(project, concurrent, scheduler));\n}\nexport class ExpandOperator {\n    constructor(project, concurrent, scheduler) {\n        this.project = project;\n        this.concurrent = concurrent;\n        this.scheduler = scheduler;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n    }\n}\nexport class ExpandSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, project, concurrent, scheduler) {\n        super(destination);\n        this.project = project;\n        this.concurrent = concurrent;\n        this.scheduler = scheduler;\n        this.index = 0;\n        this.active = 0;\n        this.hasCompleted = false;\n        if (concurrent < Number.POSITIVE_INFINITY) {\n            this.buffer = [];\n        }\n    }\n    static dispatch(arg) {\n        const { subscriber, result, value, index } = arg;\n        subscriber.subscribeToProjection(result, value, index);\n    }\n    _next(value) {\n        const destination = this.destination;\n        if (destination.closed) {\n            this._complete();\n            return;\n        }\n        const index = this.index++;\n        if (this.active < this.concurrent) {\n            destination.next(value);\n            try {\n                const { project } = this;\n                const result = project(value, index);\n                if (!this.scheduler) {\n                    this.subscribeToProjection(result, value, index);\n                }\n                else {\n                    const state = { subscriber: this, result, value, index };\n                    const destination = this.destination;\n                    destination.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n                }\n            }\n            catch (e) {\n                destination.error(e);\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    }\n    subscribeToProjection(result, value, index) {\n        this.active++;\n        const destination = this.destination;\n        destination.add(innerSubscribe(result, new SimpleInnerSubscriber(this)));\n    }\n    _complete() {\n        this.hasCompleted = true;\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n        this.unsubscribe();\n    }\n    notifyNext(innerValue) {\n        this._next(innerValue);\n    }\n    notifyComplete() {\n        const buffer = this.buffer;\n        this.active--;\n        if (buffer && buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}